{"version":3,"sources":["components/ForecastCard.tsx","actions/weatherActions.ts","components/Weather.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ForecastCard","props","className","date","src","conditionIcon","alt","condition","Row","Col","high","isMetric","low","weatherActions","getForecast","location","days","axios","get","uri","Weather","state","searchValue","hasSearched","currentWeather","temperatureF","temperatureC","forecastWeather","hasError","errorString","changeSearchValue","bind","searchWeather","clearSearch","toggleMetric","createForecastCard","event","this","setState","target","value","then","response","data","name","current","text","icon","temp_f","temp_c","forecast","forecastday","map","forecastDay","day","highF","maxtemp_f","lowF","mintemp_f","highC","maxtemp_c","lowC","mintemp_c","catch","error","index","currentTemperature","toggleMetricButtonText","Container","onChange","onClick","Fragment","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.703bd0f5.chunk.js","sourcesContent":["import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport '../css/weatherDayCard.css';\n\ntype weatherDayCardProps = {\n    isMetric: boolean,\n    date: string,\n    condition: string,\n    conditionIcon: string,\n    high: string,\n    low: string\n}\n\nconst ForecastCard = (props: weatherDayCardProps) => {\n    return (\n        <div className=\"weatherDayCardContainer\">\n            <div>{props.date}</div>\n            <div>\n                <img src={props.conditionIcon} alt=\"\" />\n            </div>\n            <div className=\"weatherDayCardConditionText\">{props.condition}</div>\n            <Row>\n                <Col>\n                    <div>High:</div>\n                    <div>{props.high} &deg;{props.isMetric ? \"C\" : \"F\"}</div>\n                </Col>\n                <Col>\n                    <div>Low:</div>\n                    <div>{props.low} &deg;{props.isMetric ? \"C\" : \"F\"}</div>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default ForecastCard;\n","import axios from 'axios';\n\nconst uri = \"http://api.weatherapi.com/v1/\";\nconst apiKey = \"816bb17f408d43a6a9a183505200112\";\n\nconst weatherActions = {\n    getForecast: function (location: string, days: number) {\n        return axios.get(uri + \"forecast.json?key=\" + apiKey + \"&q=\" + location + \"&days=\" + days);\n    }\n}\n\nexport default weatherActions;\n","import React, { ChangeEvent } from 'react';\nimport { Container } from 'react-bootstrap';\nimport ForecastCard from './ForecastCard';\nimport weatherActions from '../actions/weatherActions';\nimport '../css/weather.css';\n\ntype forecastWeatherType = {\n    date: string,\n    condition: string,\n    conditionIcon: string,\n    highF: string,\n    lowF: string,\n    highC: string,\n    lowC: string\n}\n\ntype weatherState = {\n    searchValue: string,\n    hasSearched: boolean,\n    isMetric: boolean,\n    currentWeather: {\n        location: string,\n        condition: string,\n        conditionIcon: string,\n        temperatureF: string,\n        temperatureC: string\n    },\n    forecastWeather: forecastWeatherType[],\n    hasError: boolean,\n    errorString: string\n}\n\nclass Weather extends React.Component<{}, weatherState>{\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            searchValue: \"\",\n            hasSearched: false,\n            isMetric: false,\n            currentWeather: {\n                location: \"\",\n                condition: \"\",\n                conditionIcon: \"\",\n                temperatureF: \"\",\n                temperatureC: \"\"\n            },\n            forecastWeather: [],\n            hasError: false,\n            errorString: \"\"\n        }\n\n        this.changeSearchValue = this.changeSearchValue.bind(this);\n        this.searchWeather = this.searchWeather.bind(this);\n        this.clearSearch = this.clearSearch.bind(this);\n        this.toggleMetric = this.toggleMetric.bind(this);\n        this.createForecastCard = this.createForecastCard.bind(this);\n    }\n\n    changeSearchValue(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({ searchValue: event.target.value });\n    }\n\n    searchWeather() {\n        const searchValue = this.state.searchValue\n        weatherActions.getForecast(searchValue, 3).then(response => {\n            const currentWeather = {\n                location: response.data.location.name,\n                condition: response.data.current.condition.text,\n                conditionIcon: response.data.current.condition.icon,\n                temperatureF: response.data.current.temp_f,\n                temperatureC: response.data.current.temp_c\n            }\n            const forecastWeather = response.data.forecast.forecastday.map(function (forecastDay: any) {\n                return {\n                    date: forecastDay.date,\n                    condition: forecastDay.day.condition.text,\n                    conditionIcon: forecastDay.day.condition.icon,\n                    highF: forecastDay.day.maxtemp_f,\n                    lowF: forecastDay.day.mintemp_f,\n                    highC: forecastDay.day.maxtemp_c,\n                    lowC: forecastDay.day.mintemp_c\n                }\n            });\n            this.setState({ currentWeather, forecastWeather, hasSearched: true, hasError: false, errorString: \"\" });\n        }).catch(error => {\n            const errorString = \"ERROR: Location \" + searchValue + \" is not found!\"\n            this.setState({ hasSearched: false, hasError: true, errorString })\n        });\n    }\n\n    clearSearch() {\n        this.setState({ searchValue: \"\", hasSearched: false, hasError: false, errorString: \"\" });\n    }\n\n    toggleMetric() {\n        this.setState({ isMetric: !this.state.isMetric });\n    }\n\n    createForecastCard(forecastWeather: forecastWeatherType, index: number) {\n        return (\n            <ForecastCard\n                isMetric={this.state.isMetric}\n                date={forecastWeather.date}\n                condition={forecastWeather.condition}\n                conditionIcon={forecastWeather.conditionIcon}\n                high={this.state.isMetric ? forecastWeather.highC : forecastWeather.highF}\n                low={this.state.isMetric ? forecastWeather.lowC : forecastWeather.lowF}\n                key={index}\n            />\n        );\n    }\n\n    render() {\n        const currentTemperature = this.state.isMetric ? this.state.currentWeather.temperatureC : this.state.currentWeather.temperatureF;\n        const toggleMetricButtonText = this.state.isMetric ? \"Set to Fahrenheit\" : \"Set to Celsius\";\n\n        return (\n            <Container className=\"weatherContainer\">\n                <h1>Weather</h1>\n                <div>Please enter location:</div>\n                <input value={this.state.searchValue} onChange={this.changeSearchValue} />\n                <button onClick={this.searchWeather}>Search</button>\n                <button onClick={this.clearSearch}>Clear</button>\n                {this.state.hasError ?\n                    <div>{this.state.errorString}</div>\n                    : null}\n                {this.state.hasSearched ?\n                    <React.Fragment>\n                        <h4>Current weather at {this.state.currentWeather.location}:</h4>\n                        <div className=\"currentWeatherContainer\">\n                            <div>\n                                <img src={this.state.currentWeather.conditionIcon} alt=\"\" />\n                            </div>\n                            <div className=\"currentWeatherConditionText\">{this.state.currentWeather.condition}</div>\n                            <div>{currentTemperature} &deg;{this.state.isMetric ? \"C\" : \"F\"}</div>\n                        </div>\n                        <h5>Three day forecast:</h5>\n                        <div>\n                            {this.state.forecastWeather.map(this.createForecastCard)}\n                        </div>\n                        <button onClick={this.toggleMetric}>{toggleMetricButtonText}</button>\n                    </React.Fragment>\n                    : null}\n            </Container>\n        );\n    }\n}\n\nexport default Weather;\n","import React from 'react';\nimport Weather from './components/Weather';\n\nfunction App() {\n    return (\n        <Weather />\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}